g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
g <- g + labs(x = "Number of obs", y = "Cumulative mean", main = "Cumulative mean of the exponential distribution")
g
?labs
g <- g + labs(x = "Number of obs", y = "Cumulative mean") + ggtitle("Cumulative mean of the exponential distribution")
g
vars <- (5 - (cumsum(exp) / (1  : n)))^2;
library(ggplot2)
g <- ggplot(data.frame(x = 1 : n, y = vars), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative variance") + ggtitle("Cumulative variance of the exponential distribution")
g
var(exp)
var_exp
var_exp <- 1/(lambda^2)
mean_exp
var_exp
?sample
hist(exp)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
hist(mns)
hist(means)
hist(mean(exp))
mean(exp)
hist(exp)
hist(exp, nbins = 30)
hist(exp, nbin = 30)
?hist
hist(exp, breaks = 30)
hist(mns, breaks = 30)
dim(ToothGrowth)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
boxplot(ToothGrowth$supp)
ToothGrowth
library(ggplot2)
g <- ggplot(ToothGrowth, aes(len, fill = supp, colour = supp))
g + geom_boxplot()
boxplot(ToothGrowth$len)
g <- ggplot(ToothGrowth, aes(supp, len, fill = supp, colour = supp))
g + geom_boxplot()
g <- ggplot(ToothGrowth, aes(supp, len, fill = supp))
g + geom_boxplot()
g <- ggplot(ToothGrowth, aes(dose, len, fill = dose))
g + geom_boxplot() + ggtitle("Boxplot showing the skew of the tooth length by dose")
str(ToothGrowth)
g <- ggplot(ToothGrowth, aes(as.factor(dose), len, fill = dose))
g + geom_boxplot() + ggtitle("Boxplot showing the skew of the tooth length by dose")
g + geom_boxplot() + ggtitle("Boxplot showing the skew of the tooth length by supp OJ and VC") + opts(legend.position = "none")
g + geom_boxplot() + ggtitle("Boxplot showing the skew of the tooth length by supp OJ and VC") + theme(legend.position = "none")
supp_mean <- aggregate(len ~ supp, ToothGrowth, mean)
supp_mean
dose_mean <- aggregate(len ~ dose, ToothGrowth, mean)
dose_mean
dose_supp_mean <- aggregate(len ~ dose + supp, ToothGrowth, mean)
dose_supp_mean
table(ToothGrowth$supp, ToothGrowth$dose)
t.test(ToothGrowth[(ToothGrowth$supp == OJ),], ToothGrowth[(ToothGrowth$supp == OJ),])
t.test(ToothGrowth[(ToothGrowth$supp == "OJ""),], ToothGrowth[(ToothGrowth$supp == "VC"),])
t.test(ToothGrowth[(ToothGrowth$supp == "OJ"),], ToothGrowth[(ToothGrowth$supp == "VC"),])
t.test(ToothGrowth$len[(ToothGrowth$supp == "OJ"),], ToothGrowth$len[(ToothGrowth$supp == "VC"),])
?t.test
oj <- ToothGrowth[(ToothGrowth$supp == "OJ"),]
vc <- ToothGrowth[(ToothGrowth$supp == "VC"),]
t.test(oj$len, vc$len, paired = TRUE)
t.test(oj$len, vc$len, paired = TRUE, var.equal = TRUE)
dose_supp_mean
t.test(oj$len, vc$len, paired = FALSE)
t.test(oj$len, vc$len)
oj_dose_mns <- dose_supp_mean[(dose_supp_mean$supp == "OJ"),]
vc_dose_mns <- dose_supp_mean[(dose_supp_mean$supp == "VC"),]
t.test(oj_dose_mns$len, vc_dose_mns$len)
?ToothGrowth
qt(0.975, oj$len)
qt(0.975, vc$len)
dose0.5 <- ToothGrowth[(ToothGrowth$dose == 0.5),]
dose1 <-  ToothGrowth[(ToothGrowth$dose == 1),]
dose2 <-  ToothGrowth[(ToothGrowth$dose == 2),]
t.test(dose0.5$len)$conf
t.test(dose1$len)$conf
t.test(dose2$len)$conf
t.test(oj$len)$conf
t.test(vc$len)$conf
swirl()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
pnorm(30+z, mean = 30, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE, sd = 1)
pnorm(30+z, mean = 32, lower.tail = FALSE, sd = 2)
pnorm(30+z*2, mean = 32, lower.tail = FALSE, sd = 2)
power.t.test(n = 16, delta = 2 / 4, sd=1,
| type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1,  type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4,  type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200,  type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.5)
sum(pValues < 0.05)
p.adjust(pValues,  method="bonferroni" )
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/1000
24/500
table(p.adjust(pValues2<.05, method = "bonferroni"), trueStatus)
table(p.adjust(pValues2, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2, method = "BH") < 0.05, trueStatus)
sum(6*1/6)
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, size = nh*B, replace = TRUE)
resam <- as.matrix(sam)
resam <- matrix(sam,B,nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMeans)/sqrt(1000)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 0.975))
quantile(mes, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000,function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000,function(i) testStat(DEcounts, sample(group)))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
predict(lm(y~x))
fit <- lm(y ~ x);
summary(fit)$coefficients
mean(fit$residuals)
sd(fit$residuals)
summary(fit)$sigma
library(datasets)
fit3 <- lm(mtcars$wt ~ mtcars$mpg)
summary(fit3)
sumCoef <- summary(fit3)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[1, 2]
sumCoef
mean(mtcars$wt)
p1 = data.frame(predict(fit3, newdata=mean(mtcars$wt),interval = ("confidence")))
p1
round((sumCoef[2,1] + qt(.975, df = fit3$df) * sumCoef[2, 2]) / 10, 1)
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[2, 2]) / 10
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[2, 2])
error <- qt(0.975,df=n-1)*s/sqrt(n)
dim(mtcars)
error <- qt(0.975,df=32-1)*s/sqrt(32)
error
mean(wt)
mean(matcars$wt)
mean(mtcars$wt)
mean(mtcars$wt) - error
error <- qt(0.975,df=32-1)*0.01473599/sqrt(32)
mean(mtcars$wt) - error
?mtcars
sumCoef <- summary(fit3)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[1, 2]
sumCoef
mean(mtcars$wt)
sumCoef <- summary(fit3)$coefficients
mean(mtcars$wt) + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[2, 2]
mean(mtcars$mpg)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3$df) * sumCoef[2, 2] * 2
fit3a <- lm(mtcars$wt ~ mtcars$mpg -1)
summary(fit3a)
fit3b <- lm(mtcars$wt-1 ~ mtcars$mpg)
summary(fit3)
summary(fit3b)
fit3b <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit3b)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[2, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[1, 2]
sumCoef <- summary(fit3b)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[2, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[1, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[1, 2] / 3
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[1, 2] * 3
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3b$df) * mean(mtcars$wt)
predict(fit3b, mean(mtcars$wt), interval = "confidence")
predict(fit3b, 3, interval = "confidence")
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3b$df) * sumCoef[2, 2]
xc <- mtcars$wt - mean(mtcars$wt)
yc <- mtcars$mpg - mean(mtcars$mpg)
beta1 <- sum(yc*xc) - sum(xc^2)
c(beta1, coef(lm(mtcars$mpg~mtcars$wt))[2])
xc <- mtcars$wt - mean(mtcars$wt)
yc <- mtcars$mpg - mean(mtcars$mpg)
beta1 <- sum(yc*xc) - sum(xc^2)
c(beta1, coef(lm(mtcars$mpg~1))[2])
summary(fit3b)
summary(lm(mtcars$mpg~1))
6.027/3.046
summary(lm(1 ~ mtcars$wt))
fit <- lm(wt ~ mpg, data = mtcars)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt), interval = "prediction")
)
fit <- lm(wt ~ mpg, data = mtcars)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "prediction")
fit <- lm(wt ~ mpg, data = mtcars)
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
newdata = data.frame(wt = 3)
newdata
newdata = data.frame(wt = mean(mtcars$wt))
newdata
predict(fit, newdata, interval = "prediction")
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3.2), interval = "prediction")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
yx <- lm(y~x)
summary(yx)
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "prediction")
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
predict(fit, newdata = data.frame(wt = 2), interval = "prediction")
fit2 <- lm(mpg ~ wt/2, data=mtcars)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]/2
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]*2
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]/2
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]*2
fit2 <- lm(mpg ~ (wt/2), data=mtcars)
predict(fit, newdata = data.frame(wt = 2), interval = "prediction")
summary(fit)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]/2
wt2 <- mtcars$wt / 2
fit2 <- lm(mtcars$mpg~wt2)
sumCoef <- summary(fit2)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
coef(fit)
fit2 <- lm(mtcars$mpg~I(mtcars$wt / 2))
summary(fit)
fit3 <- lm(matcars$mpg~1)
fit3 <- lm(mtcars$mpg~1)
summary(fit3)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))(max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
e3 <- resid(fit3)
yhat3 <- predict(fit3)
max(abs(e3 -(y - yhat3)))(max(abs(e3 - (y - coef(fit3)[1] - coef(fit3)[2] * x)))
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(mtcars$wt - yhat)))
max(abs(e - (mtcars$wt - coef(fit)[1] - coef(fit)[2] * x)))
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(mtcars$wt - yhat)))
max(abs(e - (mtcars$wt - coef(fit)[1] - coef(fit)[2] * mtcars$mpg)))
e3 <- resid(fit3)
yhat3 <- predict(fit3)
max(abs(e3 -(mtcars$wt - yhat3)))(max(abs(e3 - (mtcars$wt - coef(fit3)[1] - coef(fit3)[2] * mtcars$mpg)))
)
max(abs(e3 -(mtcars$wt - yhat3)))(
)
max(abs(e3 -(mtcars$wt - yhat3)))
max(abs(e3 - (mtcars$wt - coef(fit3)[1] - coef(fit3)[2] * mtcars$mpg)))
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
summary(fit)
confint(fit)[2, ]
confint(fit)[1, ]
swirl()
6
dim(InsectSprays)
head(InsectSprays,15)
sa
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
lm(count~spray, data = InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,6]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
lm(count ~ spray - 1)
lm(count ~ spray - 1, data = InsectSprays)
"nfit <- lm(count ~ spray - 1, InsectSprays)
"
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
relevel(InsectSprays$spray, "C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]) - (fit$coef[3])
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summarY(fit)$coef
summary(fit)$coef
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female",])
summary(lmF)
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/length(out2))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit) / (sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / 2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
str(mtcars)
mtcar <- mtcars
mtcar$cyl   <- as.factor(mtcar$cyl)
lm(mpg ~ cyl + wt, data = mtcar)
fit <- lm(mpg ~ cyl + wt, data = mtcar)
summary(fit)
fit2 <- lm(mpg ~ cyl + wt + cyl*wt, data = mtcar)
summary(fit2)
fit2 <- lm(mpg ~ cyl, data = mtcar)
summary(fit2)
summarY(fit)$coef
summary(fit)$coef
fit3 <- lm(mpg ~ cyl + wt + cyl*wt, data = mtcar)
summary(fit3)
anova(fit, fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y~x)
hatvalues(fit5)
dfbeta(hatvalues(fit5)[5])
dfbeta(hatvalues(fit5))
?dfbeta
dfbeta(fit5)
dfbetas(fit5)
dfbeta(fit5[5])
dfbeta(fit5[-1,])
fit5a <- lm(y[-1,~x[-1,])
fit5a <- lm(y[-1,]~x[-1,])
fit5a <- lm(y[c(1:4),]~x[c(1:4),])
fit5a <- lm(y[c(1:4)]~x[c(1:4)])
dfbeta(fit5a)
dfbeta(fit5)
influence(lm(y~x))$dfbeta
influence(lm(y~x))
fit1 <- lm(y ~ x)
fit2 <- lm(y[-5] ~ x[-5])
(fit1$coef[2] - fit2$coef[2])/summary(fit2)$coef[4]
dfbetas(fit1)
dfbeta(fit1)
fit1$coefficients
fit1$coef[2]
(fit1$coef[2] - fit2$coef[2])/summary(fit2)$coef[5]
fitmin <- lm(y[-1]~x[-1])
dfbeta(fitmin)
fitmin <- lm(y[5]~x[5])
dfbeta(fitmin)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta(lm(y~x))
0.007472953-0.007472953
0.007472953-0.179114788
0.007472953+0.179114788
sum(dfbeta(lm(y~x))[1,])
sum(dfbeta(lm(y~x))[1:4,])
sum(dfbeta(lm(y~x))[c(1:4),])
sum(dfbeta(lm(y~x))[c(1:5),])
sum(dfbeta(lm(y~x))[c(1,5),])
a <- dfbeta(lm(y~x))[1,]
a
a <- dfbeta(lm(y~x))[,1]
a
sum(a)
a[1]+a[5]
a[1]-a[5]
summary(lm(y~x))
influence(lm(y~x))
dfbeta(lm(y~x))
0.179114788*-0.0121326898
0.007472953*-0.9312924179
plot(dfbeta(lm(y~x)))
x
abline(lm(y ~ x), lwd = 2)
abline(coef(lm(y ~ x))[1], coef(lm(y ~ x))[2], lwd = 3)
abline(h = mean(y[(5/2 + 1) : 5]), lwd = 3)
summary(lm(y~x))
lm(y ~ x)$coeff[[2]]
diff(y) / diff(x)
diff(y)[c(1,5)] / diff(x[c(1,5)])
dfbeta(lm(y~x))
y[5]/x[5]
y[5]/0.9312924179
x[5]/0.9312924179
install.packages(c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc"), dependencies=TRUE)
install.packages(c("tm", "SnowballCC", "RColorBrewer", "ggplot2",
))
install.packages("tm")
install.packages(c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc"), dependencies=TRUE)
install.packages(c("tm", "SnowballCC", "RColorBrewer", "ggplot2",
))
install.packages("tm")
install.packages("SnowballCC")
install.packages("NLP")
install.packages("wordcloud")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(tm)
install.packages(c("dplyr", "plyr", "data.table", "ggplot2", "tm", "MatchIt"))
install.packages(c("dplyr", "plyr", "data.table", "ggplot2",
))
install.packages(c("colorspace", "curl", "DBI", "evaluate", "kernlab", "lubridate", "pbapply", "quantreg", "R.utils", "R6", "shiny", "shinythemes", "SparseM"))
install.packages(c("cluster", "codetools", "digest", "evaluate", "foreign", "jsonlite", "knitr", "lattice", "Matrix", "mgcv", "Rcpp", "stringi", "stringr", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("colorspace", "curl", "DBI", "evaluate", "kernlab",
"ggplot2"))
install.packages(c("colorspace", "curl", "DBI", "evaluate", "kernlab",
))
rm(list=ls())
install.packages(c("colorspace", "curl", "DBI", "evaluate", "kernlab", "lubridate", "pbapply", "quantreg", "R.utils", "R6", "shiny", "shinythemes", "SparseM"))
install.packages(c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(tm)
install.packages("colorspace")
mem.limits()
memory.limit()
sessionInfo()
?sessionInfo
install.packages("JavaVM")
install.packages("RWeka")
install.packages("tm.plugin.webmining")
library(tm.plugin.webmining)
library(rJava)
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
library("RWeka")
install.packages("edgeR")
setwd("~/DataScience/coursera/capstone/slidify/getNextWord/")
library(slidify)
library(slidifyLibraries)
publish_rpubs("predict_your_next_word")
?ppublish_rpubs
?publish_rpubs
?publish
publish("predict_your_next_word", host = "rpubs")
